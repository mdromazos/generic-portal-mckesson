<project name="TSRInstallation" default="usage" basedir=".">
    <description>Portal Installation</description>

    <property environment="env"/>
    <property name="supported.hub.version" value="^10\.4\.*.*$" />
    <property file="${env.HUB_HOME}\server\bin\build.properties" prefix="hubprop"/>
    <property file="${env.HUB_HOME}\server\resources\cmxserver.properties" prefix="hubprop"/>
	<property name="portal.home" value="${env.PORTAL_HOME}"/>
    <property name="sip.home" value="${env.SIP_HOME}"/>
    <property name="email.config.dir" value="${sip.home}/resources/mdmapps/email-config"/>
	<property name="email.templates.dir" value="${sip.home}/resources/mdmapps/email-config/templates/avos-templates"/>
	<property name="email.path" value="${portal.home}/email-config"/>
	<property name="email.xsl.path" value="${email.path}/templates/avos-templates"/>
	<property name="java.home" value="${env.JAVA_HOME}"/>
	<property name="withPim" value="${env.choice}"/>

    <property name="bpr_email.name" value="SolutionsEmailService.bpr"/>
    <property name="bpr_email.path" value="${portal.home}/bpm/${bpr_email.name}"/>
	<property name="bpr_generic_portal.name" value="InfaPortalWorkflows.bpr"/>
	<property name="bpr_generic_portal.path" value="${portal.home}/bpm/${bpr_generic_portal.name}"/>

    <property name="bpr.wsdl" value="wsdl/testwork1/prod_depot/solutions/Supplier Hub/main/projects/ActiveVos Workflow/v10/SolutionsEmailService"/>
	<property name="bpr_generic_portal.wsdl" value="wsdl/InfaPortalWorkflows"/>
	<property name="workflow.config.path" value="${portal.home}/bpm"/>
    <property name="bpr_email.tmpdir" location="${basedir}/../tmp/_build/${bpr_email.name}"/>
	<property name="avos_ear_lib_dir" value="APP-INF/lib"/>

    <property name="genericportal.ear.name" value="generic-portal.ear"/>
    <property name="genericportal.ear.path" value="${portal.home}/${genericportal.ear.name}"/>
    <property name="pimservice.war.name" value="pimservice.war"/>
    <property name="pimservice.war.path" value="${portal.home}/${pimservice.war.name}"/>

    <available file="${sip.home}/lib/ant-contrib-1.0b3.jar" property="ant.contrib.present"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${sip.home}/lib/ant-contrib-1.0b3.jar"/>
      </classpath>
    </taskdef>
    
    
    <tstamp>
        <format property="start" pattern="yyyy MMMM dd HH:mm:ss" locale="en"/>
    </tstamp>
    
    <path id="build.jboss.classpath">
        <fileset dir="${sip.home}/lib/">
            <include name="build.jar"/>
            <include name="build-db.jar"/>
            <include name="build-jboss.jar"/>
        </fileset>
    </path>

    <taskdef resource="build.taskdef.properties" classpathref="build.jboss.classpath"/>
    <taskdef resource="build-db.taskdef.properties" classpathref="build.jboss.classpath"/>
    <taskdef resource="build-jboss.taskdef.properties" classpathref="build.jboss.classpath"/>
    
     <target name="undeployPortal" >
        <echo message="Undeploying ${genericportal.ear.name}."/>
        <uninstall-app file-name="${genericportal.ear.name}"/>
    </target>
	
	<target name="undeployPortalWithPIM" >
        <echo message="Undeploying ${genericportal.ear.name}."/>
        <uninstall-app file-name="${genericportal.ear.name}"/>
        <echo message="Undeploying ${pimservice.war.name}."/>
        <uninstall-app file-name="${pimservice.war.name}"/>
    </target>
    
     <target name="prepare_bpr">
        <echo message="Preparing ${bpr_email.name}."/>
        <zip destfile="${bpr_email.path}"  update="true">
            <zipfileset dir="${email.templates.dir}" includes="*.xsl"
                        prefix="resources/SolutionsEmailService/xsl/"/>
            <zipfileset dir="${email.config.dir}" includes="emailConfig.xml"
                        prefix="${bpr.wsdl}/emailConfigParameters/"/>			
			<zipfileset dir="${email.config.dir}" includes="catalog.xml"
                        prefix="META-INF/"/>
        </zip>
		<echo message="Preparing ${bpr_generic_portal.name}."/>
        <zip destfile="${bpr_generic_portal.path}"  update="true">
			<zipfileset dir="${workflow.config.path}" includes="configuration.xml"
                        prefix="${bpr_generic_portal.wsdl}/config/"/>				
        </zip>
        
    </target>

    <target name="incl_sql_jar_infa_home">
        <echo message="Include either of ojdbc, sqljdbc, db2jdbc."/>
         <unzip src="${portal.home}/generic-portal.ear" dest="${portal.home}/generic-portal-tmp">
        </unzip>
        <zip destfile="${portal.home}/generic-portal-tmp/com.informatica.mdm.portal-portal-metadata-rest-0.0.1-SNAPSHOT.war"  update="true">
            
            <zipfileset dir="${env.HUB_HOME}/server/lib/" includes="ojdbc*.jar"
                        prefix="WEB-INF/lib/"/>
            <zipfileset dir="${env.HUB_HOME}/server/lib" includes="db2jcc*.jar"
                        prefix="WEB-INF/lib/"/>
            <zipfileset dir="${env.HUB_HOME}/server/lib" includes="sqljdbc*.jar"
                        prefix="WEB-INF/lib/"/>

             <zipfileset dir="${env.HUB_HOME}/server/lib" includes="mssql-jdbc*.jar"
                        prefix="WEB-INF/lib/"/>
             
        </zip>
        <delete file="${portal.home}/generic-portal.ear" />
        <zip destfile="${portal.home}/generic-portal.ear" basedir="${portal.home}/generic-portal-tmp/" includes="**/*" />
        
    </target>

    <target name="incl_img_in_war">
        <echo message="Include img in war."/>
         <unzip src="${portal.home}/generic-portal.ear" dest="${portal.home}/generic-portal-tmp">
        </unzip>
        <zip destfile="${portal.home}/generic-portal-tmp/mdm.ui-portal-ui-0.0.1-SNAPSHOT.war"  update="true">
            
            <zipfileset dir="${portal.home}/images/" includes="*.*"
                        prefix="images/"/>
           

        </zip>
        <delete file="${portal.home}/generic-portal.ear" />
        <zip destfile="${portal.home}/generic-portal.ear" basedir="${portal.home}/generic-portal-tmp/" includes="**/*" />
        
    </target>

    
    <target name="redeployWithPIM"  depends="undeployPortalWithPIM, deploy_pimservice"
        description="Prepare it to deploy in the application server">
        <echo message="Deploying ${genericportal.ear.path}."/>
        <install-app ear-name="${genericportal.ear.name}" ear-path="${genericportal.ear.path}"/>
    </target>


     <target name="redeploy"  depends="undeployPortal"
        description="Prepare it to deploy in the application server">
        <echo message="Deploying ${genericportal.ear.path}."/>
        <install-app ear-name="${genericportal.ear.name}" ear-path="${genericportal.ear.path}"/>
    </target>

	<target name="deploy_portal" description="Prepare it to deploy in the application server">
		<echo message="Deploying ${genericportal.ear.path}."/>
        <install-app ear-name="${genericportal.ear.name}" ear-path="${genericportal.ear.path}"/>
	</target>
	
    <target name="deploy_generic_portal_ear_PIM"  depends="incl_sql_jar_infa_home, incl_img_in_war, undeployPortalWithPIM, generic_portal_pki,deploy_portal, deploy_pimservice, deploy_bpm"/>

    <target name="deploy_generic_portal_ear"  depends="incl_sql_jar_infa_home, incl_img_in_war, undeployPortal, generic_portal_pki,deploy_portal, deploy_bpm"/>

    <target name="deploy_pimservice"  
        description="Prepare it to deploy in the application server">
        <echo message="Deploying ${pimservice.war.path}."/>
        <install-app ear-name="${pimservice.war.name}" ear-path="${pimservice.war.path}"/>
    </target>
    
    <target name="extract_bpr">
        <!-- Unzip ear to temporary location -->
        <unzip src="${bpr_email.path}" dest="${bpr_email.tmpdir}">
        </unzip>
    </target>
    
        <target if="avos_to_be_deployed" name="upsert_URN_mapping">

        <path id="activevos.urn.mapping.manegement.classpath">
            <fileset dir="${sip.home}/lib">
                <include name="axis-1.3.jar" />
                <include name="jaxrpc.jar" />
                <include name="wsdl4j-1.5.1.jar" />
                <include name="commons-discovery-0.2.jar" />
                <include name="commons-logging-1.1.1.jar" />
                <include name="build-active-vos.jar" />
            </fileset>
        </path>

        <taskdef resource="build-active-vos-taskdef.properties"
                 classpathref="activevos.urn.mapping.manegement.classpath"/>
        <upsertActiveVOSURNMapping wsdlUrl="${hubprop.activevos.mdm.urn.mapping.url}?wsdl" url="${hubprop.sip.appserver.web.url}/cmx/cs/" username="${env.avosUsername}" password="${env.avosPassword}"
                                   urn="urn:mdmcsrest:service" tenantContextId="$public"/>
		<upsertActiveVOSURNMapping wsdlUrl="${hubprop.activevos.mdm.urn.mapping.url}?wsdl" url="${hubprop.sip.appserver.web.url}/cmx/user/" username="${env.avosUsername}" password="${env.avosPassword}"
                                   urn="urn:mdmuserrest:service" tenantContextId="$public"/>
		<upsertActiveVOSURNMapping wsdlUrl="${hubprop.activevos.mdm.urn.mapping.url}?wsdl" url="${hubprop.sip.appserver.web.url}/" username="${env.avosUsername}" password="${env.avosPassword}"
                                   urn="urn:portal:service:url" tenantContextId="$public"/>
		<upsertActiveVOSURNMapping wsdlUrl="${hubprop.activevos.mdm.urn.mapping.url}?wsdl" url="${env.urnHubAdminUserUrl}" username="${env.avosUsername}" password="${env.avosPassword}"
                                   urn="urn:hub:admin:user" tenantContextId="$public"/>
		<upsertActiveVOSURNMapping wsdlUrl="${hubprop.activevos.mdm.urn.mapping.url}?wsdl" url="${env.forgotPasswordUrl}" username="${env.avosUsername}" password="${env.avosPassword}"
                                   urn="urn:forgot:password:url" tenantContextId="$public"/>
		<upsertActiveVOSURNMapping wsdlUrl="${hubprop.activevos.mdm.urn.mapping.url}?wsdl" url="${env.urnWithPortal}" username="${env.avosUsername}" password="${env.avosPassword}"
                                   urn="urn:withPortal" tenantContextId="$public"/>
		<upsertActiveVOSURNMapping wsdlUrl="${hubprop.activevos.mdm.urn.mapping.url}?wsdl" url="${env.urnWithPim}" username="${env.avosUsername}" password="${env.avosPassword}"
                                   urn="urn:withPim" tenantContextId="$public"/>
		<if>
			<equals arg1="${withPim}" arg2="yes" />
			<then>
			<upsertActiveVOSURNMapping wsdlUrl="${hubprop.activevos.mdm.urn.mapping.url}?wsdl" url="${env.urnPimAdminUser}" username="${env.avosUsername}" password="${env.avosPassword}"
                                   urn="urn:pim:admin:user" tenantContextId="$public"/>

			<upsertActiveVOSURNMapping wsdlUrl="${hubprop.activevos.mdm.urn.mapping.url}?wsdl" url="${env.urnPIMUrl}" username="${env.avosUsername}" password="${env.avosPassword}"
                                   urn="urn:pim:server:url" tenantContextId="$public"/>
			</then>
		</if>
		
        

    </target>

        <condition property="avos_installed">
        <and>
            <isset property="hubprop.activevos.install.dir"/>
            <not>
                <equals arg1="${hubprop.activevos.install.dir}" arg2=""/>
            </not>
            <available file="${hubprop.activevos.install.dir}"/>
            <not>
                <isset property="hubprop.skip.avos"/>
            </not>
        </and>
    </condition>
    
    <condition property="avos_to_be_deployed">
        <and>
            <isTrue value="${avos_installed}"/>
            <isTrue value="${ant.contrib.present}"/>
        </and>
    </condition>
    
    <macrodef name="install-app">
        <attribute name="ear-name"/>
        <attribute name="ear-path" default="${portal.home}/@{ear-name}"/>
        <sequential>
            <!-- wait up to 120 seconds for siperian-mrm.ear.deployed to appear and hence confirm deployment -->
            <echo message="waiting up to 120 seconds to see if siperian-mrm.ear.deployed is available" />
           <waitfor maxwait="180" maxwaitunit="second">
                <and>
                    <available file="${env.JBS_DEPLOY_DIR}/siperian-mrm.ear.deployed"/>
                </and>
            </waitfor>
      
            <waitfor maxwait="180" maxwaitunit="second">
                <and>
                    <available file="${env.JBS_DEPLOY_DIR}/entity360view-ear.ear.deployed"/>
                </and>
            </waitfor>
            <echo message="siperian-mrm.ear.deployed is available" />
            
            <echo message="Installing @{ear-name} to JBoss." />
            <!-- Use copy and rename to avoid too early start of JBoss hot deployer -->
            <copy file="@{ear-path}" tofile="${env.JBS_DEPLOY_DIR}/@{ear-name}.tmp" overwrite="true" />
            <move file="${env.JBS_DEPLOY_DIR}/@{ear-name}.tmp" tofile="${env.JBS_DEPLOY_DIR}/@{ear-name}" overwrite="true" />
            <echo message="Waiting for deployment of @{ear-name}"/>
            <waitfor maxwait="${hubprop.deploy.wait.time}" maxwaitunit="second" timeoutproperty="@{ear-name}.deploy.failed">
                <and>
                    <not>
                        <available file="${env.JBS_DEPLOY_DIR}/@{ear-name}.isdeploying"/>
                    </not>
                    <available file="${env.JBS_DEPLOY_DIR}/@{ear-name}.deployed"/>
                </and>
            </waitfor>
            <fail if="@{ear-name}.deploy.failed" message="Unable to deploy @{ear-name}. See server log for more details."/>
        </sequential>
    </macrodef>

    <macrodef name="uninstall-app">
        <attribute name="file-name"/>
        <sequential>
            <echo message="Uninstalling @{file-name} to JBoss." />
            <delete file="${env.JBS_DEPLOY_DIR}/@{file-name}" failonerror="false"/>
        </sequential>
    </macrodef>
    
	<target name="create_templates">
		<if>
            <available file="${email.config.dir}" type="dir"/>  
            <then>  
				<echo message="email config directory already exists"/>
            </then>  
            <else>  
				<echo message="creating email templates directory"/>
				<mkdir dir="${email.templates.dir}"/> 
			</else>  
        </if> 
		<copy todir="${email.templates.dir}">
			<fileset dir="${email.xsl.path}"/>
		</copy>
		<java classname="com.informatica.mdm.solutions.EmailConfigMain"  failonerror="true">
           <arg value="${env.HUB_HOME}"/>
		   <arg value="${portal.home}"/>
           <classpath>
                <pathelement location="${portal.home}/email-config-util.jar"/>
            </classpath>
       </java>
	</target> 
    
    <target name="deploy_bpm" if="avos_to_be_deployed" depends="upsert_URN_mapping,create_templates,prepare_bpr">

		<path id="activevos.classpath">
            <fileset dir="${hubprop.sip.home}/lib">
                <include name="axis-1.3.jar" />
                <include name="jaxrpc.jar" />
                <include name="wsdl4j-1.5.1.jar" />
                <include name="commons-discovery-0.2.jar" />
                <include name="commons-logging-1.1.1.jar" />
                <include name="bpr_tasks-9.2.4.1.jar" />
            </fileset>
        </path>

        <taskdef name="deploybpr" classname="com.activee.ant.bpr.tasks.AeDeployBPRTask"
                 classpathref="activevos.classpath"/>

        <echo message="Deploying portal Business Process Archives."/>
		
		<echo message="Path ${bpr_generic_portal.path} and ${bpr_email.path}."/>
		
		<deploybpr type="webservice" file="${bpr_email.path}"
                   failonerror="true" username="${env.avosUsername}" password="${env.avosPassword}" tourl="${hubprop.activevos.deploy.url}" />
		<deploybpr type="webservice" file="${bpr_generic_portal.path}"
                   failonerror="true" username="${env.avosUsername}" password="${env.avosPassword}" tourl="${hubprop.activevos.deploy.url}" />		       
    </target>

    <target name="generic_portal_pki" description="Run the jar file" >
        <java classname="com.infomatica.mdm.portal.util.PortalKeyStore"  failonerror="true">
                <arg value="${env.HUB_HOME}/server"/>
           <classpath>
                <pathelement location="${portal.home}/portal-util.jar"/>
                <fileset dir="${hubprop.sip.home}/lib/pkiutils">
                    <include name="**/*.jar" />
                </fileset>
                <fileset dir="${hubprop.sip.home}/lib/hashing">
                    <include name="**/*.jar" />
                </fileset>
                <fileset dir="${hubprop.sip.home}/lib">
                    <include name="**/*.jar" />
                </fileset>
                
            </classpath>
       </java>
    </target>

    
        <target name="import_pimcert_from_local_filesystem" >
            <exec executable="${java.home}/bin/keytool">
                <arg value="-importcert" />
                <arg value="-file certificate.cer"/>
                <arg value="-keystore ${env.HUB_HOME}/resources/certificates/MDM_KEYSTORE_FILE_JKS.keystore"/>
                <arg value="-alias s360key"/>
                <arg value="-storepass ${mdm_jks_passwd}"/>
            </exec>
        </target>

        <target name="import_pimjks_from_local_filesystem" >
            <exec executable="${java.home}/bin/keytool">
                <arg value="-v" />
                <arg value="-importkeystore"/>
                <arg value="-srckeystore ${pim_jks.location}/s360Keystore.jks"/>
                <arg value="-srcalias s360key"/>
                <arg value="-srcstorepass ${pim_jks_passwd}"/>
                <arg value="-destkeystore ${env.HUB_HOME}/resources/certificates/MDM_KEYSTORE_FILE_JKS.keystore"/>
                <arg value="-deststoretype JKS"/>
                <arg value="-deststorepass ${mdm_jks_passwd}"/>
            </exec>
        </target>

        <target name="change_pimjks_passwd" depends="import_pimjks_from_local_filesystem">
            <exec executable="${java.home}/bin/keytool">
                <arg value="-keypasswd" />
                <arg value="-alias s360key"/>
                <arg value="-new ${mdm_jks_passwd}"/>
                <arg value="-keypass ${pim_jks_passwd}"/>
                <arg value="-keystore ${env.HUB_HOME}/resources/certificates/MDM_KEYSTORE_FILE_JKS.keystore"/>
            </exec>
        </target>
    
</project>